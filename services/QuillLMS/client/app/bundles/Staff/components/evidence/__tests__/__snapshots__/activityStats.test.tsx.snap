// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ActivityStats component should render ActivityStats 1`] = `
<div
  className="activity-stats-container"
>
  <section
    className="comprehension-page-header-container"
  >
    <h2>
      Activity Stats
    </h2>
    <h3>
      Could Capybaras Create Chaos?
    </h3>
    <h4>
      Could Capybaras Create Chaos? [student testing]
    </h4>
  </section>
  <ReactTable
    AggregatedComponent={[Function]}
    ExpanderComponent={[Function]}
    FilterComponent={[Function]}
    LoadingComponent={[Function]}
    NoDataComponent={[Function]}
    PadRowComponent={[Function]}
    PaginationComponent={[Function]}
    PivotValueComponent={[Function]}
    ResizerComponent={[Function]}
    TableComponent={[Function]}
    TbodyComponent={[Function]}
    TdComponent={[Function]}
    TfootComponent={[Function]}
    ThComponent={[Function]}
    TheadComponent={[Function]}
    TrComponent={[Function]}
    TrGroupComponent={[Function]}
    aggregatedKey="_aggregated"
    className="activity-stats-table"
    collapseOnDataChange={true}
    collapseOnPageChange={true}
    collapseOnSortingChange={true}
    column={
      Object {
        "Aggregated": undefined,
        "Cell": undefined,
        "Expander": undefined,
        "Filter": undefined,
        "Footer": undefined,
        "Header": undefined,
        "Pivot": undefined,
        "PivotValue": undefined,
        "Placeholder": undefined,
        "aggregate": undefined,
        "className": "",
        "filterAll": false,
        "filterMethod": undefined,
        "filterable": undefined,
        "footerClassName": "",
        "footerStyle": Object {},
        "getFooterProps": [Function],
        "getHeaderProps": [Function],
        "getProps": [Function],
        "headerClassName": "",
        "headerStyle": Object {},
        "minResizeWidth": 11,
        "minWidth": 100,
        "resizable": undefined,
        "show": true,
        "sortMethod": undefined,
        "sortable": undefined,
        "style": Object {},
      }
    }
    columns={
      Array [
        Object {
          "Cell": [Function],
          "Header": "",
          "accessor": "promptText",
          "key": "promptText",
        },
        Object {
          "Header": "Total Responses",
          "accessor": "totalResponses",
          "key": "totalResponses",
          "width": 80,
        },
        Object {
          "Header": "Sessions",
          "accessor": "sessionCount",
          "key": "sessionCount",
          "width": 70,
        },
        Object {
          "Header": "Final Attempt: Optimal | Sub-Optimal",
          "accessor": "finalAttemptData",
          "key": "finalAttemptData",
          "width": 160,
        },
        Object {
          "Header": "Average Attempts to Optimal",
          "accessor": "averageAttemptsToOptimal",
          "key": "averageAttemptsToOptimal",
          "width": 120,
        },
        Object {
          "Header": "Rule Repeated: Consecutive Attempt",
          "accessor": "ruleRepeatedConsecutiveData",
          "key": "ruleRepeatedConsecutiveData",
          "width": 150,
        },
        Object {
          "Header": "Rule Repeated: Non-consecutive Attempt",
          "accessor": "ruleRepeatedNotConsecutiveData",
          "key": "ruleRepeatedNotConsecutiveData",
          "width": 150,
        },
        Object {
          "Header": "First Attempt: Optimal | Sub-Optimal",
          "accessor": "firstAttemptData",
          "key": "firstAttemptData",
          "width": 160,
        },
      ]
    }
    data={
      Array [
        Object {
          "averageAttemptsToOptimal": 2.69,
          "finalAttemptData": "100% (224) | 0% (0)",
          "firstAttemptData": "80.36% (180) | 19.64% (44)",
          "promptText": "A surge barrier in New York City could harm the local ecosystem because",
          "ruleRepeatedConsecutiveData": "92.86% (208)",
          "ruleRepeatedNotConsecutiveData": "98.21% (220)",
          "sessionCount": 224,
          "totalResponses": 4720,
        },
        Object {
          "averageAttemptsToOptimal": 2.61,
          "finalAttemptData": "100% (155) | 0% (0)",
          "firstAttemptData": "87.1% (135) | 12.9% (20)",
          "promptText": "A surge barrier in New York City could harm the local ecosystem, but",
          "ruleRepeatedConsecutiveData": "89.68% (139)",
          "ruleRepeatedNotConsecutiveData": "96.77% (150)",
          "sessionCount": 155,
          "totalResponses": 3176,
        },
        Object {
          "averageAttemptsToOptimal": 2.22,
          "finalAttemptData": "100% (195) | 0% (0)",
          "firstAttemptData": "82.56% (161) | 17.44% (34)",
          "promptText": "A surge barrier in New York City could harm the local ecosystem, so",
          "ruleRepeatedConsecutiveData": "93.33% (182)",
          "ruleRepeatedNotConsecutiveData": "97.44% (190)",
          "sessionCount": 195,
          "totalResponses": 3291,
        },
      ]
    }
    defaultExpanded={Object {}}
    defaultFilterMethod={[Function]}
    defaultFiltered={Array []}
    defaultPage={0}
    defaultPageSize={3}
    defaultResized={Array []}
    defaultSortDesc={false}
    defaultSortMethod={[Function]}
    defaultSorted={Array []}
    expanderDefaults={
      Object {
        "filterable": false,
        "resizable": false,
        "sortable": false,
        "width": 35,
      }
    }
    filterable={false}
    freezeWhenExpanded={false}
    getLoadingProps={[Function]}
    getNoDataProps={[Function]}
    getPaginationProps={[Function]}
    getProps={[Function]}
    getResizerProps={[Function]}
    getTableProps={[Function]}
    getTbodyProps={[Function]}
    getTdProps={[Function]}
    getTfootProps={[Function]}
    getTfootTdProps={[Function]}
    getTfootTrProps={[Function]}
    getTheadFilterProps={[Function]}
    getTheadFilterThProps={[Function]}
    getTheadFilterTrProps={[Function]}
    getTheadGroupProps={[Function]}
    getTheadGroupThProps={[Function]}
    getTheadGroupTrProps={[Function]}
    getTheadProps={[Function]}
    getTheadThProps={[Function]}
    getTheadTrProps={[Function]}
    getTrGroupProps={[Function]}
    getTrProps={[Function]}
    groupedByPivotKey="_groupedByPivot"
    indexKey="_index"
    loading={false}
    loadingText="Loading..."
    multiSort={true}
    nestingLevelKey="_nestingLevel"
    nextText="Next"
    noDataText="No rows found"
    ofText="of"
    onFetchData={[Function]}
    originalKey="_original"
    pageJumpText="jump to page"
    pageSizeOptions={
      Array [
        5,
        10,
        20,
        25,
        50,
        100,
      ]
    }
    pageText="Page"
    pivotDefaults={Object {}}
    pivotIDKey="_pivotID"
    pivotValKey="_pivotVal"
    previousText="Previous"
    resizable={true}
    resolveData={[Function]}
    rowsSelectorText="rows per page"
    rowsText="rows"
    showPageJump={true}
    showPageSizeOptions={true}
    showPagination={false}
    showPaginationBottom={true}
    showPaginationTop={false}
    sortable={true}
    style={Object {}}
    subRowsKey="_subRows"
  />
</div>
`;
