import { DIRECTIONS, } from '../components/studentView/promptStep'


export const ATTEMPTS_TO_SCORE = {
  1: 1.0,
  2: 0.75,
  3: 0.5,
  4: 0.25,
  5: 0.0
}

export const generateConceptResults = (currentActivity, submittedResponses) => {
  const conjunctionToQuestionNumber = {
    because: 1,
    but: 2,
    so: 3
  }

  // This list is manually copied from the production database.
  // It is a very brittle integration since there's nothing that keeps it
  // synced with what's actually going on in the database
  const conjunctionToSemanticConceptUid = {
    because: "qkjnIjFfXdTuKO7FgPzsIg",
    but: "KwspxuelfGZQCq7yX6ThPQ",
    so: "IBdOFpAWi42LgfXvcz0scQ"
  }

  // This list generated by cross-comparing the Evidence::Check::ALL_CHECKS
  // array with the Evidence::Rule::TYPES array.  The first was used to
  // figure out which checks run after AutoML, and the second was used to
  // determine the actual string values we expect in rule_type.
  // As with the above, this is a very brittle integration.
  const postAutomlFeedbackTypes = [
    'rules-based-2',
    'grammar',
    'spelling',
    'rules-based-3'
  ]

  const conceptResults = []

  for (const [promptID, responses] of Object.entries(submittedResponses)) {
    const prompt = Object.values(currentActivity.prompts).filter((prompt) => prompt.id == promptID)[0]
    responses.forEach((response, index) => {
      const attempt = index + 1
      const conceptResultMetadata = {
        answer: response.entry,
        attemptNumber: attempt,
        correct: response.optimal ? 1 : 0,
        directions: (attempt == 1) ? DIRECTIONS : responses[index - 1].feedback,
        prompt: prompt.text,
        questionNumber: conjunctionToQuestionNumber[prompt.conjunction],
        questionScore: ATTEMPTS_TO_SCORE[responses.length],
      }

      conceptResults.push({
        concept_uid: response.concept_uid,
        question_type: 'comprehension',
        metadata: conceptResultMetadata
      })

      if (postAutomlFeedbackTypes.includes(response.feedback_type)) {
        conceptResults.push({
          concept_uid: conjunctionToSemanticConceptUid[prompt.conjunction],
          question_type: 'comprehension',
          metadata: {
            ...conceptResultMetadata,
            ...{correct: 1}
          }
        })
      }
    })
  }
  return conceptResults
}
