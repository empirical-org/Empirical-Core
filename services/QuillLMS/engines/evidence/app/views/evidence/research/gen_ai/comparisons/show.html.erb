<% content_for :all_activities_breadcrumbs do %>
  / <%= link_to @dataset.stem_vault.activity.name, @dataset.stem_vault.activity %>
  / <%= link_to "#{@dataset.stem_vault.conjunction.capitalize} Stem Vault", @dataset.stem_vault %>
  / <%= link_to "#{@dataset} Trials", @dataset %>
<% end %>

<div class="container">
  <div class="column">
    <p><%= datetime_helper(@comparison.created_at) %></p>
  </div>
</div>
<hr>

<div>
  <%= form_with url: research_gen_ai_stem_vault_datasets_path(@dataset.stem_vault), method: :post, local: true, id: 'data-subset-form' do |form| %>
    <select id="filter-dropdown" onchange="filterRows()">
      <option value="all">Show all</option>
      <option value="checked">Checked responses only</option>
      <option value="non-matching">Show Non-Matching (Red) Only</option>
    </select>
    <%= form.hidden_field :parent_id, value: @dataset.id %>
    <%= form.submit "Create Data Subset", id: "create-data-subset", disabled: true %>
  <% end %>

  <table>
    <thead style="position: sticky; top: 0; background-color: #fff; z-index: 1;">
      <tr>
        <th class="dark-border select-column">
          Select all
          <input type="checkbox" id="select-all-checkbox" onchange="toggleAllVisibleCheckboxes(this)">
        </th>
        <th class="dark-border example-number-column">#</th>
        <th class="dark-border student-response-column"><%= @comparison.stem_and_conjunction %></th>
        <th class="dark-border feedback-key-column"><%= render 'feedback_key' %></th>

        <% @trials.each do |trial| %>
          <% llm_prompt = trial.llm_prompt %>
          <th class='dark-border-top no-border-right'></th>
          <th class='dark-border-top-bottom'></th>
          <th class="dark-border-top-bottom-right trial-column">
            <div style='font-size: 0.7em'>
              <%= link_to "Trial #{trial.number}", research_gen_ai_dataset_trial_path(@dataset, trial) %></td>
              <ul style='list-style-type: none; padding: 0;'>
                <li>Model: <%= trial.llm.version %></li>
                <li>
                  Guidelines:
                  <%= llm_prompt.optimal_guidelines_count %> Optimal,
                  <%= llm_prompt.suboptimal_guidelines_count %> Sub-Optimal
                </li>
                <li>
                  Examples:
                  <%= llm_prompt.optimal_examples_count %> Optimal,
                  <%= llm_prompt.suboptimal_examples_count %> Sub-Optimal
                </li>
                <li>
                  Prompt Template:
                  <%= link_to llm_prompt.llm_prompt_template, llm_prompt.llm_prompt_template %>
                </li>
                <li>Temperature: <%= trial.temperature %></li>
              </ul>
            </div>
            <%= render 'confusion_matrix', matrix: trial.confusion_matrix %>
          </th>
        <% end %>
      </tr>
    </thead>
    <tbody>
      <% @test_examples.each.with_index do |test_example, index| %>
        <tr class="response-row">
          <td class='dark-border'>
            <%= check_box_tag "test_example_ids[]", test_example.id, false, class: "response-checkbox", form: "data-subset-form", id: "checkbox-#{index}" %>
          </td>
          <td class='dark-border'><%= index + 1 %></td>
          <td class='dark-border'>
            <%= test_example.student_response %>
          </td>
          <td class='dark-border'>
            <%= test_example.curriculum_proposed_feedback %>
          </td>

          <% @trials.each do |trial| %>
            <% llm_example = @llm_examples_map[[trial.id, test_example.id]]&.first %>

            <% if llm_example %>
              <% llm_example_index = trial.llm_examples.index(llm_example) %>
              <% g_eval_id = trial.g_evals&.keys&.first %>
              <% g_eval_score = trial.g_evals&.dig(g_eval_id, llm_example_index)&.to_i || '' %>
              <td class="dark-border-top-bottom-left <%= llm_example_match_color(llm_example) %>">
                <%= llm_example.optimal? ? :O : :S %>
              </td>
              <td class='dark-border-top-bottom'>
                <%= g_eval_score %>
              </td>
              <td class='dark-border-top-bottom-right'>
                <%= llm_example&.llm_feedback %>
              </td>
            <% else %>
              <td class='dark-border-top-bottom-left'></td>
              <td class='dark-border-top-bottom'></td>
              <td class='dark-border-top-bottom-right'>
            <% end %>
          <% end %>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>

<style>
  .dark-border {
    border: 2px solid black;
  }
  .dark-border-top {
    border-top: 2px solid black;
  }
  .dark-border-left {
    border-left: 2px solid black;
  }
  .dark-border-right {
    border-right: 2px solid black;
  }
  .dark-border-top-bottom-right {
    border-top: 2px solid black;
    border-bottom: 2px solid black;
    border-right: 2px solid black;
  }
  .dark-border-top-bottom-left {
    border-top: 2px solid black;
    border-bottom: 2px solid black;
    border-left: 2px solid black;
  }
  .dark-border-top-bottom {
    border-top: 2px solid black;
    border-bottom: 2px solid black;
  }
  .feedback-key-font {
    font-size: 12px;
  }
  .comparison-column {
    width: 200px;
  }
  .hidden {
    display: none;
  }
  .trial-column {
    width: calc(60% / <%= @trials.count %>);
  }
  .select-column {
    width: 2%;
  }
  .example-number-column {
    width: 2%;
  }
  .student-response-column {
    width: 18%;
  }
  .feedback-key-column {
    width: 18%;
  }
  #create-data-subset {
    margin-left: 10px;
  }
</style>

<script>
  function filterRows() {
    const filterValue = document.getElementById('filter-dropdown').value;
    const rows = document.querySelectorAll('.response-row');
    const selectAllCheckbox = document.getElementById('select-all-checkbox');

    rows.forEach(row => {
      const checkbox = row.querySelector('.response-checkbox');
      const hasRedCell = row.querySelector('td[class*="dark-red"], td[class*="light-red"]');

      switch(filterValue) {
        case 'all':
          row.classList.remove('hidden');
          break;
        case 'checked':
          row.classList.toggle('hidden', !checkbox.checked);
          break;
        case 'non-matching':
          row.classList.toggle('hidden', !hasRedCell);
          break;
      }
    });

    selectAllCheckbox.checked = false;
    updateCreateDataSubsetButton();
  }

  function updateCreateDataSubsetButton() {
    const checkboxes = document.querySelectorAll('.response-checkbox:not(.hidden)');
    const createButton = document.getElementById('create-data-subset');
    const anyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);
    createButton.disabled = !anyChecked;
  }

  function toggleAllVisibleCheckboxes(selectAllCheckbox) {
    const visibleCheckboxes = document.querySelectorAll('.response-row:not(.hidden) .response-checkbox');
    visibleCheckboxes.forEach(checkbox => {
      checkbox.checked = selectAllCheckbox.checked;
    });
    updateCreateDataSubsetButton();
  }

  document.querySelectorAll('.response-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', updateCreateDataSubsetButton);
  });

  document.getElementById('filter-dropdown').addEventListener('change', () => {
    const selectAllCheckbox = document.getElementById('select-all-checkbox');
    selectAllCheckbox.checked = false;
  });

  updateCreateDataSubsetButton();
  filterRows();
</script>